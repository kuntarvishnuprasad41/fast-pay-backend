datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchantId String? // Foreign key field (optional)
  merchant   Merchant? @relation(name: "MerchantUsers", fields: [merchantId], references: [id])

  // Add the relation name to match the one in the Merchant model
}

model Merchant {
  id            String         @id @default(uuid())
  name          String
  contactNumber String
  email         String         @unique
  gstNumber     String?
  creditLimit   Float
  debitLimit    Float
  status        MerchantStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  bankDetails          BankDetail[]
  merchantTransactions MerchantTransaction[]
  payouts              Payout[]
  supportTickets       SupportTicket[]

  users User[] @relation(name: "MerchantUsers")
  // This field now correctly references the relation
}

model BankDetail {
  id            String   @id @default(uuid())
  merchant      Merchant @relation(fields: [merchantId], references: [id])
  merchantId    String
  accountHolder String
  accountNumber String
  ifscCode      String
  bankName      String
  upiId         String?
  qrCodeUrl     String?
  minLimit      Float
  maxLimit      Float
  turnover      Float
  creditLimit   Float
  debitLimit    Float
  mode          Mode
  method        Method
  level         String
  status        Status
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BankTransaction {
  id          String   @id @default(uuid())
  date        DateTime
  txnId       String   @unique
  amount      Float
  utr         String   @unique
  isGetPay    Boolean
  method      String
  account     String
  mode        String
  description String
  txnDate     DateTime
  crDr        CrDr
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  merchantTransactions MerchantTransaction[]
}

model MerchantTransaction {
  id                String            @id @default(uuid())
  merchant          Merchant          @relation(fields: [merchantId], references: [id])
  merchantId        String
  bankTransaction   BankTransaction?  @relation(fields: [bankTransactionId], references: [id])
  bankTransactionId String?
  utr               String
  status            TransactionStatus
  amount            Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Payout {
  id         String       @id @default(uuid())
  merchant   Merchant     @relation(fields: [merchantId], references: [id])
  merchantId String
  amount     Float
  status     PayoutStatus
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model SupportTicket {
  id          String        @id @default(uuid())
  merchant    Merchant      @relation(fields: [merchantId], references: [id])
  merchantId  String
  subject     String
  description String
  status      SupportStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Role {
  ADMIN
  DATA_ENTRY
  SUPPORT
  MERCHANT
}

enum MerchantStatus {
  ACTIVE
  FROZEN
}

enum Mode {
  MANUAL
  AUTO
}

enum Method {
  UPI
  BANK_TRANSFER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TransactionStatus {
  SUCCESS
  FAILED
  REJECTED
  PENDING
}

enum PayoutStatus {
  REQUESTED
  PAID
  FAILED
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum CrDr {
  CR
  DR
}
