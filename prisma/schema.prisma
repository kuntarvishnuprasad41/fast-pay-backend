// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Payment {
  id         Int           @id @default(autoincrement())
  amount     Float
  status     PaymentStatus
  merchant   Merchant      @relation(fields: [merchantId], references: [id])
  merchantId Int
  utrNumber  String?
  screenShot String?
  proof      PaymentProof?
  createdAt  DateTime      @default(now())
}

model PaymentProof {
  id         Int     @id @default(autoincrement())
  screenshot String // URL or file path of the screenshot
  utrNumber  String
  payment    Payment @relation(fields: [paymentId], references: [id])
  paymentId  Int     @unique
}

model Merchant {
  id            Int          @id @default(autoincrement())
  accountHolder String
  accountNumber String
  ifscCode      String
  bankName      String
  creditLimit   Float
  debitLimit    Float
  upiId         String
  level         String
  qrCode        String // Store QR code data
  users         User[]       @relation(name: "UserToMerchant")
  payments      Payment[]
  settlements   Settlement[]
  createdAt     DateTime     @default(now())
  Payout        Payout[]
}

model Payout {
  id            Int      @id @default(autoincrement())
  merchant      Merchant @relation(fields: [merchantId], references: [id])
  merchantId    Int
  payoutAmount  Float // The amount paid to the merchant
  payoutDate    DateTime @default(now())
  initiatedBy   User     @relation(fields: [initiatedById], references: [id]) // The admin who initiated the payout
  initiatedById Int
  payinsTotal   Float // Total of the merchant's pay-ins that the payout is based on
  createdAt     DateTime @default(now())
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  role       Role
  merchant   Merchant? @relation(fields: [merchantId], references: [id], name: "UserToMerchant")
  merchantId Int?
  createdAt  DateTime  @default(now())
  Payout     Payout[]
}

model Settlement {
  id            Int      @id @default(autoincrement())
  merchant      Merchant @relation(fields: [merchantId], references: [id])
  merchantId    Int
  settledAmount Float
  percentage    Float?
  createdAt     DateTime @default(now())
}

enum Role {
  SuperAdmin
  Admin
  Verification
  Merchant
  MerchantUser
}

enum PaymentStatus {
  Initiated
  Pending
  Verified
  Error
}
